// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// df_convert
Rcpp::DataFrame df_convert(Rcpp::DataFrame df);
RcppExport SEXP _Rfuzzycoco_df_convert(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(df_convert(df));
    return rcpp_result_gen;
END_RCPP
}
// lst_convert
Rcpp::List lst_convert(Rcpp::List lst);
RcppExport SEXP _Rfuzzycoco_lst_convert(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(lst_convert(lst));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_fuzzy_coco_eval
List rcpp_fuzzy_coco_eval(Rcpp::DataFrame df, List fuzzy_system_desc, List params, bool verbose);
RcppExport SEXP _Rfuzzycoco_rcpp_fuzzy_coco_eval(SEXP dfSEXP, SEXP fuzzy_system_descSEXP, SEXP paramsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< List >::type fuzzy_system_desc(fuzzy_system_descSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_fuzzy_coco_eval(df, fuzzy_system_desc, params, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_fuzzy_coco_predict
Rcpp::DataFrame rcpp_fuzzy_coco_predict(Rcpp::DataFrame df, List fuzzy_system_desc, bool verbose);
RcppExport SEXP _Rfuzzycoco_rcpp_fuzzy_coco_predict(SEXP dfSEXP, SEXP fuzzy_system_descSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< List >::type fuzzy_system_desc(fuzzy_system_descSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_fuzzy_coco_predict(df, fuzzy_system_desc, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_fuzzy_coco_searchBestFuzzySystem
List rcpp_fuzzy_coco_searchBestFuzzySystem(Rcpp::DataFrame df, int nb_out_vars, List params, int seed, bool verbose);
RcppExport SEXP _Rfuzzycoco_rcpp_fuzzy_coco_searchBestFuzzySystem(SEXP dfSEXP, SEXP nb_out_varsSEXP, SEXP paramsSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type nb_out_vars(nb_out_varsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_fuzzy_coco_searchBestFuzzySystem(df, nb_out_vars, params, seed, verbose));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_RcppFuzzyCocoWrapper();

static const R_CallMethodDef CallEntries[] = {
    {"_Rfuzzycoco_df_convert", (DL_FUNC) &_Rfuzzycoco_df_convert, 1},
    {"_Rfuzzycoco_lst_convert", (DL_FUNC) &_Rfuzzycoco_lst_convert, 1},
    {"_Rfuzzycoco_rcpp_fuzzy_coco_eval", (DL_FUNC) &_Rfuzzycoco_rcpp_fuzzy_coco_eval, 4},
    {"_Rfuzzycoco_rcpp_fuzzy_coco_predict", (DL_FUNC) &_Rfuzzycoco_rcpp_fuzzy_coco_predict, 3},
    {"_Rfuzzycoco_rcpp_fuzzy_coco_searchBestFuzzySystem", (DL_FUNC) &_Rfuzzycoco_rcpp_fuzzy_coco_searchBestFuzzySystem, 5},
    {"_rcpp_module_boot_RcppFuzzyCocoWrapper", (DL_FUNC) &_rcpp_module_boot_RcppFuzzyCocoWrapper, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rfuzzycoco(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
